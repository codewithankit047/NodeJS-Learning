Mongoose---> its a package to connect nodejs to mongoDB
mognoose is advanced version as compared to mongoDB
---have modal schema --> blue print-->specific fields
--connect mognoose with express js and create routes for CRUD operations


explain Mongoose
Schema:
A blueprint or template that defines the structure of yo
ur data. It provides validation, casting, default values
It defines the structure of our data. We can define various types like String, Number etc., along
with their validation rules such as required or unique. It also provides us methods that we
can use on these properties later in code.

difference btween Mongoose and mongodb package
- mongoose allows you to work directly with your MongoDB database without having to write raw queries yourself
- mongoose has more features than MongoDB driver
- it allows you to work with objects instead of documents (documents are just JSON) which 
makes your life easier when working with complex schemas.
- You don't need to write raw queries anymore - everything's done through models

explain schema
In Mongoose, each document/object must have a corresponding Schema defined using the `mongoose.Schema
()` method. This creates an object containing all the necessary information about how this particular model should 
()` method. The Schema specifies what kind of information should be stored about an object within this collection.
` method. The Schema maps to an actual collection inside MongoDb where all the documents will be stored
.
Each field within this object corresponds to one column in the database table. Here’s how you would
define a simple user model:
```javascript
const User = new mongoose.Schema({
    name: { type: String }, // Required string property called "name"
    email: {
        type: String,
        match: /^\S+@\S+\.\S+$/,   // Email format validator regex
        pattern
        : /^[a-zA-Z0-9]+$/    // Alphanumeric only username constraint
        }
        });
        });
        ```
        In this example, there are two mandatory fields (`name`, `email`) both strings. Additionally
        there is another optional field named `_id`. This represents the ObjectId generated by MongoDB automatically
        there is another optional parameter added named “match” which specifies what kind of emails should be allowed
        there is another optional field named `_id`. This represents the ObjectId generated by MongoDB automatically whenever a new
        ,
        the second optional parameter specifies some additional constraints on those fields.
        For instance,
        the first line sets up a regular expression based email address check while
        the next
        lines specify alphanumeric characters only restriction for the `username`.
        